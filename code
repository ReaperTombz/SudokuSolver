#include <iostream>
#include <array>

const int GRID_SIZE = 9;

bool checkRow(int grid[GRID_SIZE][GRID_SIZE], int row, int num) {
    for (int col = 0; col < GRID_SIZE; col++) {
        if (grid[row][col] == num) {
            return false;
        }
    }
    return true;
}

bool checkCol(int grid[GRID_SIZE][GRID_SIZE], int col, int num) {
    for (int row = 0; row < GRID_SIZE; row++) {
        if (grid[row][col] == num) {
            return false;
        }
    }
    return true;
}

bool checkBox(int grid[GRID_SIZE][GRID_SIZE], int boxStartRow, int boxStartCol, int num) {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            if (grid[row + boxStartRow][col + boxStartCol] == num) {
                return false;
            }
        }
    }
    return true;
}

bool isSafe(int grid[GRID_SIZE][GRID_SIZE], int row, int col, int num) {
    return checkRow(grid, row, num) && checkCol(grid, col, num) && checkBox(grid, row - row % 3, col - col % 3, num);
}

bool solveSudoku(int grid[GRID_SIZE][GRID_SIZE], int row, int col) {
    if (row == GRID_SIZE) {
        return true;
    }
    if (col == GRID_SIZE) {
        return solveSudoku(grid, row + 1, 0);
    }
    if (grid[row][col] != 0) {
        return solveSudoku(grid, row, col + 1);
    }
    for (int num = 1; num <= GRID_SIZE; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;
            if (solveSudoku(grid, row, col + 1)) {
                return true;
            }
            grid[row][col] = 0;
        }
    }
    return false;
}

void printGrid(int grid[GRID_SIZE][GRID_SIZE]) {
    for (int row = 0; row < GRID_SIZE; row++) {
        for (int col = 0; col < GRID_SIZE; col++) {
            cout << grid[row][col] << " ";
        }
        cout << endl;
    }
}

int main() {
    int grid[GRID_SIZE][GRID_SIZE] = {
      {3, 0, 6, 5, 0, 8, 4, 0, 0},
      {5, 2, 0, 0, 0, 0, 0, 0, 0},
      {0, 8, 7, 0, 0, 0, 0, 3, 1},
      {0, 0
      
